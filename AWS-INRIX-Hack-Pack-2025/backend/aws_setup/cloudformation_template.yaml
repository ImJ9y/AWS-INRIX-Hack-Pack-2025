AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fall Detection Emergency System - AWS Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  ProjectName:
    Type: String
    Default: 'fall-detection'
    Description: 'Project name for resource naming'

Resources:
  # S3 Bucket for storing emergency data and video clips
  EmergencyDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-emergency-data-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # NotificationConfiguration removed - CloudWatchConfigurations is not supported

  # DynamoDB Tables
  FallDetectionEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-events-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  FallDetectionAnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-analytics-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: date_hour
          AttributeType: S
        - AttributeName: camera_id
          AttributeType: S
      KeySchema:
        - AttributeName: date_hour
          KeyType: HASH
        - AttributeName: camera_id
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FallDetectionDailyAnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-daily-analytics-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: date_hour
          AttributeType: S
      KeySchema:
        - AttributeName: date_hour
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FallDetectionInsightsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-insights-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: insight_id
          AttributeType: S
      KeySchema:
        - AttributeName: insight_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FallDetectionEmergencyTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-emergency-tracking-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # SNS Topics
  EmergencyTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-emergency-${Environment}'
      DisplayName: 'Fall Detection Emergency Alerts'

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-notifications-${Environment}'
      DisplayName: 'Fall Detection System Notifications'

  CriticalTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-critical-${Environment}'
      DisplayName: 'Fall Detection Critical Alerts'

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FallDetectionLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: 
                  - !Ref EmergencyTopic
                  - !Ref NotificationTopic
                  - !Ref CriticalTopic
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt FallDetectionEventsTable.Arn
                  - !GetAtt FallDetectionAnalyticsTable.Arn
                  - !GetAtt FallDetectionDailyAnalyticsTable.Arn
                  - !GetAtt FallDetectionInsightsTable.Arn
                  - !GetAtt FallDetectionEmergencyTrackingTable.Arn
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${EmergencyDataBucket}/*'

  # Lambda Functions
  EmergencyProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-emergency-processor-${Environment}'
      Runtime: python3.9
      Handler: emergency_processor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          EMERGENCY_TOPIC_ARN: !Ref EmergencyTopic
          CRITICAL_TOPIC_ARN: !Ref CriticalTopic
          EVENTS_TABLE_NAME: !Ref FallDetectionEventsTable
          TRACKING_TABLE_NAME: !Ref FallDetectionEmergencyTrackingTable
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Emergency processor placeholder'}

  AnalyticsProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-analytics-processor-${Environment}'
      Runtime: python3.9
      Handler: analytics_processor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ANALYTICS_TABLE_NAME: !Ref FallDetectionAnalyticsTable
          DAILY_ANALYTICS_TABLE_NAME: !Ref FallDetectionDailyAnalyticsTable
          INSIGHTS_TABLE_NAME: !Ref FallDetectionInsightsTable
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Analytics processor placeholder'}

  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/${ProjectName}/system-${Environment}'
      RetentionInDays: 30

  # IoT Core Policy
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-iot-policy-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/fall-detection-*'
          - Effect: Allow
            Action:
              - iot:Publish
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/fall-detection/*'
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/fall-detection/*'
          - Effect: Allow
            Action:
              - iot:Receive
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/fall-detection/*'

Outputs:
  EmergencyDataBucketName:
    Description: 'S3 Bucket for emergency data storage'
    Value: !Ref EmergencyDataBucket
    Export:
      Name: !Sub '${ProjectName}-emergency-bucket-${Environment}'

  EmergencyTopicArn:
    Description: 'SNS Topic ARN for emergency notifications'
    Value: !Ref EmergencyTopic
    Export:
      Name: !Sub '${ProjectName}-emergency-topic-${Environment}'

  NotificationTopicArn:
    Description: 'SNS Topic ARN for general notifications'
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${ProjectName}-notification-topic-${Environment}'

  CriticalTopicArn:
    Description: 'SNS Topic ARN for critical alerts'
    Value: !Ref CriticalTopic
    Export:
      Name: !Sub '${ProjectName}-critical-topic-${Environment}'

  EventsTableName:
    Description: 'DynamoDB table name for events'
    Value: !Ref FallDetectionEventsTable
    Export:
      Name: !Sub '${ProjectName}-events-table-${Environment}'

  AnalyticsTableName:
    Description: 'DynamoDB table name for analytics'
    Value: !Ref FallDetectionAnalyticsTable
    Export:
      Name: !Sub '${ProjectName}-analytics-table-${Environment}'

  EmergencyProcessorFunctionName:
    Description: 'Lambda function name for emergency processing'
    Value: !Ref EmergencyProcessorFunction
    Export:
      Name: !Sub '${ProjectName}-emergency-processor-${Environment}'

  AnalyticsProcessorFunctionName:
    Description: 'Lambda function name for analytics processing'
    Value: !Ref AnalyticsProcessorFunction
    Export:
      Name: !Sub '${ProjectName}-analytics-processor-${Environment}'

  CloudWatchLogGroupName:
    Description: 'CloudWatch Log Group name'
    Value: !Ref CloudWatchLogGroup
    Export:
      Name: !Sub '${ProjectName}-log-group-${Environment}'
